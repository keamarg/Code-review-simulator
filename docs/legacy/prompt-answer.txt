{
  "questions-examiner": "1. Ask the student to explain the differences between iterative search and binary search, including a discussion of their time complexities (Big O notation) and the conditions under which each method is most efficient. \n2. Ask how sorting of lists can be achieved conceptually using the idea of Comparable/CompareTo, and request an explanation of how ordering can be maintained in abstract data types like List, Set, and Map. \n3. Present a scenario where a collection of data must be organized and queried, and ask the student to describe which ADT (List, Set, or Map) they would use for each part of the task and why. \n4. Ask the student to justify their choices by discussing potential trade-offs in performance and complexity when using different data structures for sorting and searching.",
  "task-student": "### Exam Task\n\nYou are given a scenario where a large dataset needs to be organized and queried efficiently. **Your task is to explain, in clear steps, how you would solve the following problems without writing any code:**\n\n1. **Sorting:** Describe how you would sort a list of elements, detailing how the concept of ordering (using Comparable/CompareTo) would be applied. Include your reasoning on the efficiency of the sorting algorithm in terms of Big O notation.\n\n2. **Searching:** Explain two methods to search through a list: an iterative search and a binary search. For each method, describe the approach, the scenarios in which it is most applicable, and compare their time complexities.\n\n3. **Collections Usage:** In the context of the scenario, decide whether a List, Set, or Map is the most appropriate data structure to store your data for each of the following operations: insertion, retrieval, and ensuring uniqueness. Justify your choices.\n\nFocus on clear, concise explanations that showcase your understanding of the underlying concepts and their practical applications."
}
