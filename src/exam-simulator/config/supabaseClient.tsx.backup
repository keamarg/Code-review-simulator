import { createClient, SupabaseClient } from "@supabase/supabase-js";

let supabaseInstance: SupabaseClient | null = null;

async function fetchApiKey(): Promise<string> {
  const API_KEY_URL =
    "https://api-key-server-codereview.vercel.app/api/database";
  const MAX_RETRIES = 3;
  const RETRY_DELAY = 1000; // 1 second

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(
        `üîó Fetching Supabase API key (attempt ${attempt}/${MAX_RETRIES})...`
      );
      console.log(`üìç Current URL: ${window.location.href}`);
      console.log(`üåê Requesting from: ${API_KEY_URL}`);

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // Increased to 15 seconds

      const response = await fetch(API_KEY_URL, {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Cache-Control": "no-cache",
        },
        mode: "cors", // Explicitly request CORS
        credentials: "omit", // Don't send credentials
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log(
        `üì° Response status: ${response.status} ${response.statusText}`
      );
      console.log(`üìã Response headers:`, [...response.headers.entries()]);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const apiKey = await response.json();
      console.log(
        "‚úÖ API key fetched successfully",
        typeof apiKey,
        apiKey?.length > 0 ? `Length: ${apiKey.length}` : ""
      );
      return apiKey;
    } catch (error) {
      console.warn(`‚ö†Ô∏è API key fetch attempt ${attempt} failed:`, error);

      // Log specific error details
      if (error instanceof Error) {
        console.warn(`Error name: ${error.name}`);
        console.warn(`Error message: ${error.message}`);
        console.warn(`Error stack:`, error.stack);
      }

      if (attempt === MAX_RETRIES) {
        console.error("‚ùå All API key fetch attempts failed");

        // Provide specific error guidance
        let errorMessage = `Failed to fetch API key after ${MAX_RETRIES} attempts`;
        if (error instanceof Error) {
          if (error.name === "AbortError") {
            errorMessage =
              "Supabase API key request timed out. This might be due to network issues or server overload.";
          } else if (
            error.message.includes("Failed to fetch") ||
            error.message.includes("NetworkError")
          ) {
            errorMessage =
              "Network error fetching Supabase API key. This could be due to:\n" +
              "‚Ä¢ CORS restrictions on HTTPS localhost\n" +
              "‚Ä¢ Firewall blocking the request\n" +
              "‚Ä¢ Internet connectivity issues\n" +
              "‚Ä¢ The API server being temporarily unavailable";
          } else if (error.message.includes("cors")) {
            errorMessage =
              "CORS error when fetching Supabase API key. Try running the app on HTTP instead of HTTPS for development.";
          }
        }

        throw new Error(errorMessage);
      }

      // Wait before retrying with exponential backoff
      const delay = RETRY_DELAY * Math.pow(2, attempt - 1);
      console.log(`‚è≥ Waiting ${delay}ms before retry...`);
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }

  throw new Error("Unreachable code");
}

async function initializeSupabase(): Promise<SupabaseClient> {
  if (supabaseInstance) {
    console.log("‚úÖ Using existing Supabase instance");
    return supabaseInstance;
  }

  try {
    console.log("üöÄ Initializing Supabase client...");
    const apiKey = await fetchApiKey();

    if (!apiKey || typeof apiKey !== "string") {
      throw new Error(`Invalid API key received: ${typeof apiKey}`);
    }

    supabaseInstance = createClient(
      "https://gzoltpvnxwjoeycomcby.supabase.co",
      apiKey
    );

    console.log("‚úÖ Supabase client initialized successfully");
    return supabaseInstance;
  } catch (error) {
    console.error("‚ùå Supabase initialization failed:", error);

    // Provide user-friendly error messages
    if (error instanceof Error) {
      throw new Error(`Supabase initialization failed: ${error.message}`);
    }

    throw new Error("Failed to initialize Supabase: Unknown error");
  }
}

// Export async function to get initialized Supabase client
export const getSupabase = async (): Promise<SupabaseClient> => {
  return await initializeSupabase();
};

// For backward compatibility - creates a proxy that initializes on first use
export const supabase = new Proxy({} as SupabaseClient, {
  get(target, prop) {
    if (prop === "then" || prop === "catch" || prop === "finally") {
      // Handle promise-like access
      return undefined;
    }

    throw new Error(`
‚ö†Ô∏è  Supabase not initialized yet!

Use this instead:
const supabase = await getSupabase();

Or wrap your code in an async function:
async function myFunction() {
  const supabase = await getSupabase();
  // Now you can use supabase...
}
    `);
  },
});
