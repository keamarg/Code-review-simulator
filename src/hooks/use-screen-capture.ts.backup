/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useState, useEffect } from "react";
import { UseMediaStreamResult } from "./use-media-stream-mux";

// Utility function to detect Firefox
const isFirefox = (): boolean => {
  return navigator.userAgent.toLowerCase().includes("firefox");
};

// Check if displaySurface constraint is supported
const checkDisplaySurfaceSupport = (): boolean => {
  try {
    const supportedConstraints =
      navigator.mediaDevices.getSupportedConstraints();
    return supportedConstraints.displaySurface || false;
  } catch {
    return false;
  }
};

// Add a global test function for debugging
if (typeof window !== "undefined") {
  (window as any).testScreenShare = async () => {
    console.log("üß™ Manual Screen Share Test");
    console.log("üîç Environment:", {
      userAgent: navigator.userAgent,
      isFirefox: navigator.userAgent.toLowerCase().includes("firefox"),
      protocol: window.location.protocol,
      isSecureContext: window.isSecureContext,
      hasMediaDevices: !!navigator.mediaDevices,
      hasGetDisplayMedia: !!navigator.mediaDevices?.getDisplayMedia,
      supportedConstraints: navigator.mediaDevices?.getSupportedConstraints?.(),
    });

    try {
      console.log("üéØ Trying absolutely minimal call...");
      const stream = await navigator.mediaDevices.getDisplayMedia();
      console.log("‚úÖ SUCCESS! Stream:", stream);
      console.log("üìä Stream details:", {
        id: stream.id,
        active: stream.active,
        tracks: stream.getTracks().map((track) => ({
          kind: track.kind,
          label: track.label,
          enabled: track.enabled,
          readyState: track.readyState,
        })),
      });

      // Stop the stream
      stream.getTracks().forEach((track) => track.stop());
      return "SUCCESS: Screen sharing works!";
    } catch (error) {
      console.error("‚ùå FAILED:", error);
      console.error("üìä Error details:", {
        name: error instanceof Error ? error.name : "Unknown",
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : "No stack",
      });
      return `FAILED: ${
        error instanceof Error ? error.message : String(error)
      }`;
    }
  };
}

export function useScreenCapture(): UseMediaStreamResult {
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [isStreaming, setIsStreaming] = useState(false);

  useEffect(() => {
    const handleStreamEnded = () => {
      setIsStreaming(false);
      setStream(null);
    };
    if (stream) {
      stream
        .getTracks()
        .forEach((track) => track.addEventListener("ended", handleStreamEnded));
      return () => {
        stream
          .getTracks()
          .forEach((track) =>
            track.removeEventListener("ended", handleStreamEnded)
          );
      };
    }
  }, [stream]);

  const debugBrowserEnvironment = () => {
    console.log("üîç Browser Environment Debug:", {
      isFirefox: isFirefox(),
      userAgent: navigator.userAgent,
      isSecureContext: window.isSecureContext,
      protocol: window.location.protocol,
      mediaDevicesAvailable: !!navigator.mediaDevices,
      getDisplayMediaAvailable: !!navigator.mediaDevices?.getDisplayMedia,
      supportedConstraints: navigator.mediaDevices?.getSupportedConstraints?.(),
    });
  };

  const testMinimalScreenCapture = async (): Promise<MediaStream> => {
    console.log("üß™ Testing ultra-minimal screen capture for Firefox...");
    debugBrowserEnvironment();

    // Check for HTTPS requirement
    if (
      window.location.protocol !== "https:" &&
      !window.location.hostname.includes("localhost")
    ) {
      const httpsError = new Error(`üö® HTTPS Required for Screen Sharing

‚ùå Current URL: ${window.location.protocol}//${window.location.host}
‚úÖ Required: https://${window.location.host}

Firefox and Chrome require HTTPS for screen sharing to work.

Solutions:
1. Access the site via HTTPS: https://${window.location.host}
2. If developing locally, use https://localhost:3000 instead of http://localhost:3000
3. Set up SSL certificate for your development server

Technical details:
- Current protocol: ${window.location.protocol}
- Secure context: ${window.isSecureContext}
- getDisplayMedia available: ${!!navigator.mediaDevices?.getDisplayMedia}`);
      httpsError.name = "SecurityError";
      throw httpsError;
    }

    try {
      // Absolutely minimal - no constraints at all
      const mediaStream = await navigator.mediaDevices.getDisplayMedia();
      console.log("‚úÖ Ultra-minimal screen capture succeeded");
      setStream(mediaStream);
      setIsStreaming(true);
      return mediaStream;
    } catch (error) {
      console.error("‚ùå Ultra-minimal screen capture failed:", error);

      // Special handling for security/protocol errors
      if (error instanceof DOMException) {
        if (
          error.name === "NotAllowedError" &&
          window.location.protocol === "http:"
        ) {
          const httpsError = new Error(`üîí HTTPS Required for Screen Sharing

The error "The object can not be found here" means Firefox cannot access screen sharing over HTTP.

‚úÖ Solution: Use HTTPS instead
Current: ${window.location.href}
Try: ${window.location.href.replace("http://", "https://")}

Screen sharing requires a secure connection (HTTPS) to work properly.`);
          httpsError.name = "SecurityError";
          throw httpsError;
        }
      }

      throw error;
    }
  };

  const start = async () => {
    debugBrowserEnvironment();

    try {
      // Build constraints based on browser capabilities
      const constraints: MediaStreamConstraints = {
        video: {
          frameRate: { ideal: 30, max: 60 },
        },
        audio: false, // Keep audio disabled for better Firefox compatibility
      };

      // Only add specific constraints if supported by the browser
      const supportedConstraints =
        navigator.mediaDevices.getSupportedConstraints();

      if (supportedConstraints.width && supportedConstraints.height) {
        (constraints.video as any).width = { ideal: 1920, max: 3840 };
        (constraints.video as any).height = { ideal: 1080, max: 2160 };
      }

      // Add displaySurface constraint only if supported (mainly for Chrome)
      if (checkDisplaySurfaceSupport()) {
        (constraints.video as any).displaySurface = "monitor";
      }

      console.log(
        "üéØ Attempting screen capture with constraints:",
        constraints
      );
      const mediaStream = await navigator.mediaDevices.getDisplayMedia(
        constraints
      );

      console.log("‚úÖ Screen capture successful");
      setStream(mediaStream);
      setIsStreaming(true);
      return mediaStream;
    } catch (error) {
      console.error("‚ùå Screen capture error:", error);

      // Log detailed error information
      console.error("üìä Error Details:", {
        errorName: error instanceof Error ? error.name : "Unknown",
        errorMessage: error instanceof Error ? error.message : String(error),
        errorStack: error instanceof Error ? error.stack : "No stack",
        isDOMException: error instanceof DOMException,
        isFirefox: isFirefox(),
        isSecureContext: window.isSecureContext,
        protocol: window.location.protocol,
      });

      // Provide more specific error handling for different browsers
      if (error instanceof DOMException) {
        let errorMessage = "";

        switch (error.name) {
          case "NotAllowedError":
            if (isFirefox()) {
              errorMessage = `ü¶ä Firefox Screen Sharing Issue:

The permission dialog should appear when you click to start screen sharing.

Steps to fix:
1. Make sure you clicked "Tillad" (Allow) in the permission dialog
2. If no dialog appeared, try refreshing the page
3. Check if Firefox is blocking the permission dialog
4. Make sure the site is loaded over HTTPS

Technical details:
- Protocol: ${window.location.protocol}
- Secure context: ${window.isSecureContext}
- Error: ${error.message}`;
            } else {
              errorMessage =
                "Screen sharing permission denied. Please allow screen sharing and try again.";
            }
            break;
          case "NotFoundError":
            errorMessage =
              "No screen sharing source available. Please make sure you have screens or windows available to share.";
            break;
          case "NotSupportedError":
            errorMessage = `Screen sharing is not supported. Details:
- Browser: ${navigator.userAgent}
- Secure context: ${window.isSecureContext}
- Protocol: ${window.location.protocol}
Please use a modern browser with HTTPS.`;
            break;
          case "AbortError":
            errorMessage =
              "Screen sharing was cancelled. Please try again and select a screen or window to share.";
            break;
          case "TypeError":
            errorMessage =
              "Screen sharing configuration error. Please refresh the page and try again.";
            break;
          case "InvalidStateError":
            errorMessage =
              "Screen sharing request was made in an invalid state. Please refresh the page and try again.";
            break;
          default:
            errorMessage = `Screen sharing failed: ${error.message}

Technical details:
- Error type: ${error.name}
- Browser: ${isFirefox() ? "Firefox" : "Other"}
- Secure context: ${window.isSecureContext}
- Protocol: ${window.location.protocol}`;
        }

        const enhancedError = new Error(errorMessage);
        enhancedError.name = error.name;
        throw enhancedError;
      }

      throw error;
    }
  };

  const startWithFallback = async (maxRetries = 2): Promise<MediaStream> => {
    for (let i = 0; i < maxRetries; i++) {
      try {
        return await start();
      } catch (error: any) {
        console.log(
          `üîÑ Screen capture attempt ${i + 1} failed:`,
          error.message
        );

        if (i === maxRetries - 1) throw error;

        // For Firefox, try with simpler constraints on retry
        if (isFirefox() && i === 0) {
          console.log("üîÑ Retrying with simplified constraints for Firefox...");
          // Wait a bit before retry
          await new Promise((resolve) => setTimeout(resolve, 1000));
        } else {
          throw error; // Don't retry for other errors
        }
      }
    }
    throw new Error("Max retries reached");
  };

  const stop = () => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      setStream(null);
      setIsStreaming(false);
    }
  };

  const result: UseMediaStreamResult = {
    type: "screen",
    start: isFirefox() ? testMinimalScreenCapture : startWithFallback, // Use minimal test for Firefox
    stop,
    isStreaming,
    stream,
  };

  return result;
}
